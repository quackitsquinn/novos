/// Tell rust-lld to use the linker script
const LINK_SCRIPT_PATH: &str = "kernel/link.ld";

fn main() {
    println!("cargo:rustc-link-arg=-T{}", LINK_SCRIPT_PATH);
    println!("cargo:rerun-if-changed={}", LINK_SCRIPT_PATH);
    //generate_characters();
}

fn generate_characters() {
    // convert a file containing a C array of characters to a rust array of characters
    fn c_file_to_rust(c_arr: &str, arr_name: &str, off_count: i16) -> String {
        let start = c_arr.find('{').unwrap();
        let end = c_arr.rfind('}').unwrap();
        let mut contents = c_arr[start + 1..end].to_string();
        contents = contents.replace("{", "[").replace("}", "]");
        let mut char_count = contents.matches("[").count();
        format!(
            "pub const {}: [[u8;8]; {}] = [",
            arr_name,
            char_count as i32 - off_count as i32
        ) + &contents
            + "];"
    }

    let mut files = vec![];

    let basic = include_str!("font8x8/font8x8_basic.h");
    let basic = c_file_to_rust(basic, "BASIC", 2);
    files.push(basic);

    let ext_latin = include_str!("font8x8/font8x8_ext_latin.h");
    let ext_latin = c_file_to_rust(ext_latin, "LATIN", 0);
    files.push(ext_latin);

    let block = include_str!("font8x8/font8x8_block.h");
    let block = c_file_to_rust(block, "BLOCK", 0);
    files.push(block);

    let box_drawing = include_str!("font8x8/font8x8_box.h");
    let box_drawing = c_file_to_rust(box_drawing, "BOX_DRAWING", 0);
    files.push(box_drawing);

    let greek = include_str!("font8x8/font8x8_greek.h");
    let greek = c_file_to_rust(greek, "GREEK", 0);
    files.push(greek);

    let hiragana = include_str!("font8x8/font8x8_hiragana.h");
    let hiragana = c_file_to_rust(hiragana, "HIRAGANA", 0);
    files.push(hiragana);

    let out =
        format!("// This file is generated by build.rs\n\n").to_string() + &files.join("\n\n");

    std::fs::write("src/display/character/font8x8.rs", out).unwrap();
}
